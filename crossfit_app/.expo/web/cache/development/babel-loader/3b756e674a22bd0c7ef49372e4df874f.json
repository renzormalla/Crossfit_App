{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\Crossfit_App\\\\crossfit_app\\\\components\\\\Banner.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Avatar, Text } from 'react-native-elements';\nimport * as firebase from 'firebase';\nimport * as ImagePicker from 'expo-image-picker';\nimport { uploadData } from \"../service/LoginServices\";\nexport default function Banner(_ref) {\n  var user = _ref.user,\n      name = _ref.name,\n      last = _ref.last,\n      setName = _ref.setName,\n      setLast = _ref.setLast;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var test = firebase.storage().ref().child(user).getDownloadURL().then(function (res) {\n    setImage(res);\n  }).catch(function (error) {\n    console.log(\"empty\");\n  });\n\n  var pickImage = function pickImage() {\n    var result, uploadUrl;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n\n            if (result.cancelled) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(uploadImageAsync(result.uri, user));\n\n          case 6:\n            uploadUrl = _context.sent;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(setImage(result.uri));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(Avatar, {\n    size: \"xlarge\",\n    rounded: true,\n    title: \"NA\",\n    activeOpacity: 0.7,\n    containerStyle: styles.avatar,\n    onPress: pickImage,\n    source: {\n      uri: image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.textLetfRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    h3: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, name)), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      textAlign: 'right',\n      marginRight: 20\n    },\n    h3: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, last))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    height: 130,\n    width: '100%',\n    backgroundColor: 'transparent',\n    backgroundColor: 'rgba(250, 250, 250, .9)',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 5\n  },\n  avatar: {\n    marginHorizontal: 10,\n    backgroundColor: '#daf',\n    width: 120,\n    height: 120\n  },\n  textLetfRight: {\n    marginVertical: 20,\n    flex: 1,\n    width: '100%'\n  }\n});","map":{"version":3,"sources":["C:/Users/PC/Desktop/Crossfit_App/crossfit_app/components/Banner.js"],"names":["React","useState","useEffect","Avatar","Text","firebase","ImagePicker","uploadData","Banner","user","name","last","setName","setLast","image","setImage","test","storage","ref","child","getDownloadURL","then","res","catch","error","console","log","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","uploadImageAsync","uri","uploadUrl","styles","container","avatar","textLetfRight","flex","textAlign","marginRight","StyleSheet","create","flexDirection","height","width","backgroundColor","alignItems","justifyContent","paddingVertical","marginHorizontal","marginVertical"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, View} from 'react-native';\r\nimport { Avatar, Text } from 'react-native-elements'\r\nimport * as firebase from 'firebase';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { uploadData } from '../service/LoginServices';\r\n\r\nexport default function Banner({user, name, last, setName, setLast}) {\r\n\r\n    const [image, setImage] = useState(null);\r\n\r\n    const test = firebase.storage().ref().child(user).getDownloadURL()\r\n    .then((res) => {\r\n        setImage(res);\r\n    })\r\n    .catch(error => {\r\n        console.log(\"empty\")\r\n    });\r\n\r\n    const pickImage = async () => {\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n        allowsEditing: true,\r\n        aspect: [4, 3],\r\n        quality: 1,\r\n    });\r\n\r\n    if (!result.cancelled) {\r\n        const uploadUrl = await uploadImageAsync(result.uri, user);\r\n        await setImage(result.uri);\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n\r\n    <View style={styles.container}>\r\n            <Avatar\r\n                size=\"xlarge\"\r\n                rounded\r\n                title=\"NA\"\r\n                activeOpacity={0.7}\r\n                containerStyle = {styles.avatar}\r\n                onPress={pickImage}\r\n                source={{ uri: image }}\r\n            />\r\n            <View style={styles.textLetfRight}>\r\n                <View style={{flex: 1}}>\r\n                    <Text h3>{ name }</Text>\r\n                </View>\r\n                <View style={{flex: 1}}>\r\n                    <Text style={{textAlign: 'right', marginRight: 20}} h3 >{ last }</Text>\r\n                </View>\r\n            </View>\r\n        </View>\r\n  );\r\n}\r\n\r\n// async function uploadImageAsync(uri, user) {\r\n//     const blob = await new Promise((resolve, reject) => {\r\n//       const xhr = new XMLHttpRequest();\r\n//       xhr.onload = function() {\r\n//         resolve(xhr.response);\r\n//       };\r\n//       xhr.onerror = function(e) {\r\n//         console.log(e);\r\n//         reject(new TypeError('Network request failed'));\r\n//       };\r\n//       xhr.responseType = 'blob';\r\n//       xhr.open('GET', uri, true);\r\n//       xhr.send(null);\r\n//     });\r\n  \r\n//     const ref = firebase\r\n//       .storage()\r\n//       .ref()\r\n//       .child(user);\r\n//     const snapshot = await ref.put(blob);\r\n  \r\n//     // We're done with the blob, close and release it\r\n//     blob.close();\r\n  \r\n//     return await snapshot.ref.getDownloadURL();\r\n// }\r\n    \r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: \"row\",\r\n        height: 130,\r\n        width: '100%',\r\n        backgroundColor: 'transparent',\r\n        backgroundColor: 'rgba(250, 250, 250, .9)',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        paddingVertical: 5,\r\n    },\r\n    avatar: {\r\n        marginHorizontal: 10,\r\n        backgroundColor: '#daf',\r\n        width: 120,\r\n        height: 120,\r\n    },\r\n    textLetfRight: {\r\n        marginVertical: 20,\r\n        flex: 1,\r\n        width:'100%',\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}