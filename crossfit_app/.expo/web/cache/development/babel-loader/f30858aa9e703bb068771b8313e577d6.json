{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\Crossfit_App\\\\crossfit_app\\\\components\\\\BannerEdit.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Avatar, Text } from 'react-native-elements';\nimport * as firebase from 'firebase';\nimport * as ImagePicker from 'expo-image-picker';\nimport { uploadData } from \"../service/LoginServices\";\nexport default function BannerEdit(_ref) {\n  var name = _ref.name,\n      last = _ref.last,\n      setName = _ref.setName,\n      setLast = _ref.setLast;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var user = global.emailUsuario;\n  useEffect(function () {\n    uploadData(upload, user);\n  }, []);\n\n  var upload = function upload(data) {\n    setName(data.name);\n    setLast(data.last);\n  };\n\n  var test = firebase.storage().ref().child(user).getDownloadURL().then(function (res) {\n    setImage(res);\n  }).catch(function (error) {\n    console.log(\"empty\");\n  });\n\n  var pickImage = function pickImage() {\n    var result, uploadUrl;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n            console.log(result);\n\n            if (result.cancelled) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(uploadImageAsync(result.uri, user));\n\n          case 7:\n            uploadUrl = _context.sent;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(setImage(result.uri));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, React.createElement(Avatar, {\n    size: \"xlarge\",\n    rounded: true,\n    title: \"NA\",\n    activeOpacity: 0.7,\n    containerStyle: styles.avatar,\n    onPress: pickImage,\n    source: {\n      uri: image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.textLetfRight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setName(text);\n    },\n    editable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: {\n      alignSelf: 'center'\n    },\n    h3: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, name))), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, React.createElement(TextInput, {\n    style: {\n      textAlign: 'right',\n      marginRight: 20\n    },\n    onChangeText: function onChangeText(text) {\n      return setLast(text);\n    },\n    editable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    h3: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, last)))));\n}\n\nfunction uploadImageAsync(uri, user) {\n  var blob, ref, snapshot;\n  return _regeneratorRuntime.async(function uploadImageAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            var xhr = new XMLHttpRequest();\n\n            xhr.onload = function () {\n              resolve(xhr.response);\n            };\n\n            xhr.onerror = function (e) {\n              console.log(e);\n              reject(new TypeError('Network request failed'));\n            };\n\n            xhr.responseType = 'blob';\n            xhr.open('GET', uri, true);\n            xhr.send(null);\n          }));\n\n        case 2:\n          blob = _context2.sent;\n          ref = firebase.storage().ref().child(user);\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(ref.put(blob));\n\n        case 6:\n          snapshot = _context2.sent;\n          blob.close();\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(snapshot.ref.getDownloadURL());\n\n        case 10:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    height: 130,\n    width: '100%',\n    backgroundColor: 'transparent',\n    backgroundColor: 'rgba(250, 250, 250, .9)',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 5\n  },\n  avatar: {\n    marginHorizontal: 10,\n    backgroundColor: '#daf',\n    width: 120,\n    height: 120\n  },\n  textLetfRight: {\n    marginVertical: 20,\n    flex: 1,\n    width: '100%'\n  }\n});","map":{"version":3,"sources":["C:/Users/PC/Desktop/Crossfit_App/crossfit_app/components/BannerEdit.js"],"names":["React","useState","useEffect","Avatar","Text","firebase","ImagePicker","uploadData","BannerEdit","name","last","setName","setLast","image","setImage","user","global","emailUsuario","upload","data","test","storage","ref","child","getDownloadURL","then","res","catch","error","console","log","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","uploadImageAsync","uri","uploadUrl","styles","container","avatar","textLetfRight","flex","text","alignSelf","textAlign","marginRight","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","e","TypeError","responseType","open","send","blob","put","snapshot","close","StyleSheet","create","flexDirection","height","width","backgroundColor","alignItems","justifyContent","paddingVertical","marginHorizontal","marginVertical"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, View, TextInput} from 'react-native';\r\nimport { Avatar, Text } from 'react-native-elements'\r\nimport * as firebase from 'firebase';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { uploadData } from '../service/LoginServices';\r\n\r\nexport default function BannerEdit({name, last, setName, setLast}) {\r\n\r\n    const [image, setImage] = useState(null);\r\n    const user = global.emailUsuario;\r\n\r\n    useEffect(() => {\r\n        uploadData(upload, user);\r\n    }, []);\r\n\r\n    const upload = (data) => {\r\n        setName(data.name)\r\n        setLast(data.last)\r\n    }\r\n\r\n    const test = firebase.storage().ref().child(user).getDownloadURL()\r\n    .then((res) => {\r\n        setImage(res);\r\n    })\r\n    .catch(error => {\r\n        console.log(\"empty\")\r\n    });\r\n\r\n    const pickImage = async () => {\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n        allowsEditing: true,\r\n        aspect: [4, 3],\r\n        quality: 1,\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    if (!result.cancelled) {\r\n        const uploadUrl = await uploadImageAsync(result.uri, user);\r\n        await setImage(result.uri);\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n\r\n    <View style={styles.container}>\r\n            <Avatar\r\n                size=\"xlarge\"\r\n                rounded\r\n                title=\"NA\"\r\n                activeOpacity={0.7}\r\n                containerStyle = {styles.avatar}\r\n                onPress={pickImage}\r\n                source={{ uri: image }}\r\n            />\r\n            <View style={styles.textLetfRight}>\r\n                <View style={{flex: 1}}>\r\n                    <TextInput onChangeText={text => setName(text)} editable> \r\n                        <Text style={{alignSelf:'center'}} h3 >{name}</Text> \r\n                    </TextInput>\r\n                </View>\r\n                <View style={{flex: 1}}>\r\n                    <TextInput style={{textAlign: 'right', marginRight: 20}} onChangeText={text => setLast(text)} editable> \r\n                        <Text h3 >{ last }</Text>\r\n                    </TextInput>\r\n                </View>\r\n            </View>\r\n        </View>\r\n  );\r\n}\r\n\r\nasync function uploadImageAsync(uri, user) {\r\n    const blob = await new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.onload = function() {\r\n        resolve(xhr.response);\r\n      };\r\n      xhr.onerror = function(e) {\r\n        console.log(e);\r\n        reject(new TypeError('Network request failed'));\r\n      };\r\n      xhr.responseType = 'blob';\r\n      xhr.open('GET', uri, true);\r\n      xhr.send(null);\r\n    });\r\n  \r\n    const ref = firebase\r\n      .storage()\r\n      .ref()\r\n      .child(user);\r\n    const snapshot = await ref.put(blob);\r\n  \r\n    // We're done with the blob, close and release it\r\n    blob.close();\r\n  \r\n    return await snapshot.ref.getDownloadURL();\r\n}\r\n    \r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: \"row\",\r\n        height: 130,\r\n        width: '100%',\r\n        backgroundColor: 'transparent',\r\n        backgroundColor: 'rgba(250, 250, 250, .9)',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        paddingVertical: 5,\r\n    },\r\n    avatar: {\r\n        marginHorizontal: 10,\r\n        backgroundColor: '#daf',\r\n        width: 120,\r\n        height: 120,\r\n    },\r\n    textLetfRight: {\r\n        marginVertical: 20,\r\n        flex: 1,\r\n        width:'100%',\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}